//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export namespace ApiClient {

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    certificatesAll(): Promise<CertificateDto[]> {
        let url_ = this.baseUrl + "/api/Certificates";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCertificatesAll(_response);
        });
    }

    protected processCertificatesAll(response: Response): Promise<CertificateDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CertificateDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CertificateDto[]>(null as any);
    }

    /**
     * @param type (optional) 
     * @param validFrom (optional) 
     * @param validTo (optional) 
     * @param supplierHandle (optional) 
     * @param pdfDocument (optional) 
     * @param participantHandles (optional) 
     * @return OK
     */
    certificatesPOST(type: string | undefined, validFrom: Date | undefined, validTo: Date | undefined, supplierHandle: string | undefined, pdfDocument: FileParameter | undefined, participantHandles: string[] | undefined): Promise<CertificateDto> {
        let url_ = this.baseUrl + "/api/Certificates";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (type === null || type === undefined)
            throw new Error("The parameter 'type' cannot be null.");
        else
            content_.append("Type", type.toString());
        if (validFrom === null || validFrom === undefined)
            throw new Error("The parameter 'validFrom' cannot be null.");
        else
            content_.append("ValidFrom", validFrom.toJSON());
        if (validTo === null || validTo === undefined)
            throw new Error("The parameter 'validTo' cannot be null.");
        else
            content_.append("ValidTo", validTo.toJSON());
        if (supplierHandle === null || supplierHandle === undefined)
            throw new Error("The parameter 'supplierHandle' cannot be null.");
        else
            content_.append("SupplierHandle", supplierHandle.toString());
        if (pdfDocument === null || pdfDocument === undefined)
            throw new Error("The parameter 'pdfDocument' cannot be null.");
        else
            content_.append("PdfDocument", pdfDocument.data, pdfDocument.fileName ? pdfDocument.fileName : "PdfDocument");
        if (participantHandles === null || participantHandles === undefined)
            throw new Error("The parameter 'participantHandles' cannot be null.");
        else
            participantHandles.forEach(item_ => content_.append("ParticipantHandles", item_.toString()));

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCertificatesPOST(_response);
        });
    }

    protected processCertificatesPOST(response: Response): Promise<CertificateDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CertificateDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CertificateDto>(null as any);
    }

    /**
     * @return OK
     */
    certificatesGET(handle: string): Promise<CertificateDto> {
        let url_ = this.baseUrl + "/api/Certificates/{handle}";
        if (handle === undefined || handle === null)
            throw new Error("The parameter 'handle' must be defined.");
        url_ = url_.replace("{handle}", encodeURIComponent("" + handle));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCertificatesGET(_response);
        });
    }

    protected processCertificatesGET(response: Response): Promise<CertificateDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CertificateDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CertificateDto>(null as any);
    }

    /**
     * @return OK
     */
    certificatesDELETE(handle: string): Promise<void> {
        let url_ = this.baseUrl + "/api/Certificates/{handle}";
        if (handle === undefined || handle === null)
            throw new Error("The parameter 'handle' must be defined.");
        url_ = url_.replace("{handle}", encodeURIComponent("" + handle));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCertificatesDELETE(_response);
        });
    }

    protected processCertificatesDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param type (optional) 
     * @param validFrom (optional) 
     * @param validTo (optional) 
     * @param supplierHandle (optional) 
     * @param pdfDocument (optional) 
     * @param participantHandles (optional) 
     * @return OK
     */
    certificatesPATCH(handle: string, type: string | undefined, validFrom: Date | undefined, validTo: Date | undefined, supplierHandle: string | undefined, pdfDocument: FileParameter | undefined, participantHandles: string[] | undefined): Promise<CertificateDto> {
        let url_ = this.baseUrl + "/api/Certificates/{handle}";
        if (handle === undefined || handle === null)
            throw new Error("The parameter 'handle' must be defined.");
        url_ = url_.replace("{handle}", encodeURIComponent("" + handle));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (type === null || type === undefined)
            throw new Error("The parameter 'type' cannot be null.");
        else
            content_.append("Type", type.toString());
        if (validFrom === null || validFrom === undefined)
            throw new Error("The parameter 'validFrom' cannot be null.");
        else
            content_.append("ValidFrom", validFrom.toJSON());
        if (validTo === null || validTo === undefined)
            throw new Error("The parameter 'validTo' cannot be null.");
        else
            content_.append("ValidTo", validTo.toJSON());
        if (supplierHandle === null || supplierHandle === undefined)
            throw new Error("The parameter 'supplierHandle' cannot be null.");
        else
            content_.append("SupplierHandle", supplierHandle.toString());
        if (pdfDocument === null || pdfDocument === undefined)
            throw new Error("The parameter 'pdfDocument' cannot be null.");
        else
            content_.append("PdfDocument", pdfDocument.data, pdfDocument.fileName ? pdfDocument.fileName : "PdfDocument");
        if (participantHandles === null || participantHandles === undefined)
            throw new Error("The parameter 'participantHandles' cannot be null.");
        else
            participantHandles.forEach(item_ => content_.append("ParticipantHandles", item_.toString()));

        let options_: RequestInit = {
            body: content_,
            method: "PATCH",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCertificatesPATCH(_response);
        });
    }

    protected processCertificatesPATCH(response: Response): Promise<CertificateDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CertificateDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CertificateDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    comments(certificateHandle: string, body: CommentDto | undefined): Promise<CommentDto> {
        let url_ = this.baseUrl + "/api/certificates/{certificateHandle}/comments";
        if (certificateHandle === undefined || certificateHandle === null)
            throw new Error("The parameter 'certificateHandle' must be defined.");
        url_ = url_.replace("{certificateHandle}", encodeURIComponent("" + certificateHandle));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processComments(_response);
        });
    }

    protected processComments(response: Response): Promise<CommentDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CommentDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CommentDto>(null as any);
    }

    /**
     * @return OK
     */
    commentsAll(certificateHandle: string): Promise<CommentDto[]> {
        let url_ = this.baseUrl + "/api/certificates/{certificateHandle}/comments";
        if (certificateHandle === undefined || certificateHandle === null)
            throw new Error("The parameter 'certificateHandle' must be defined.");
        url_ = url_.replace("{certificateHandle}", encodeURIComponent("" + certificateHandle));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCommentsAll(_response);
        });
    }

    protected processCommentsAll(response: Response): Promise<CommentDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CommentDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CommentDto[]>(null as any);
    }

    /**
     * @param name (optional) 
     * @param userId (optional) 
     * @param department (optional) 
     * @param plant (optional) 
     * @return OK
     */
    participants(name: string | undefined, userId: string | undefined, department: string | undefined, plant: string | undefined): Promise<ParticipantDto[]> {
        let url_ = this.baseUrl + "/api/Participants?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (department === null)
            throw new Error("The parameter 'department' cannot be null.");
        else if (department !== undefined)
            url_ += "department=" + encodeURIComponent("" + department) + "&";
        if (plant === null)
            throw new Error("The parameter 'plant' cannot be null.");
        else if (plant !== undefined)
            url_ += "plant=" + encodeURIComponent("" + plant) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processParticipants(_response);
        });
    }

    protected processParticipants(response: Response): Promise<ParticipantDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ParticipantDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ParticipantDto[]>(null as any);
    }

    /**
     * @param name (optional) 
     * @param index (optional) 
     * @param city (optional) 
     * @return OK
     */
    suppliers(name: string | undefined, index: string | undefined, city: string | undefined): Promise<SupplierDto[]> {
        let url_ = this.baseUrl + "/api/Suppliers?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (index === null)
            throw new Error("The parameter 'index' cannot be null.");
        else if (index !== undefined)
            url_ += "index=" + encodeURIComponent("" + index) + "&";
        if (city === null)
            throw new Error("The parameter 'city' cannot be null.");
        else if (city !== undefined)
            url_ += "city=" + encodeURIComponent("" + city) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSuppliers(_response);
        });
    }

    protected processSuppliers(response: Response): Promise<SupplierDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SupplierDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SupplierDto[]>(null as any);
    }

    /**
     * @return OK
     */
    users(): Promise<UserDto[]> {
        let url_ = this.baseUrl + "/api/Users";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUsers(_response);
        });
    }

    protected processUsers(response: Response): Promise<UserDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserDto[]>(null as any);
    }
}

export class CertificateDto implements ICertificateDto {
    handle?: string;
    type?: string | undefined;
    validFrom?: Date;
    validTo?: Date;
    supplier?: SupplierDto;
    pdfDocument?: string | undefined;
    participants?: ParticipantDto[] | undefined;
    comments?: CommentDto[] | undefined;

    constructor(data?: ICertificateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.handle = _data["handle"];
            this.type = _data["type"];
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>undefined;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>undefined;
            this.supplier = _data["supplier"] ? SupplierDto.fromJS(_data["supplier"]) : <any>undefined;
            this.pdfDocument = _data["pdfDocument"];
            if (Array.isArray(_data["participants"])) {
                this.participants = [] as any;
                for (let item of _data["participants"])
                    this.participants!.push(ParticipantDto.fromJS(item));
            }
            if (Array.isArray(_data["comments"])) {
                this.comments = [] as any;
                for (let item of _data["comments"])
                    this.comments!.push(CommentDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CertificateDto {
        data = typeof data === 'object' ? data : {};
        let result = new CertificateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["handle"] = this.handle;
        data["type"] = this.type;
        data["validFrom"] = this.validFrom ? formatDate(this.validFrom) : <any>undefined;
        data["validTo"] = this.validTo ? formatDate(this.validTo) : <any>undefined;
        data["supplier"] = this.supplier ? this.supplier.toJSON() : <any>undefined;
        data["pdfDocument"] = this.pdfDocument;
        if (Array.isArray(this.participants)) {
            data["participants"] = [];
            for (let item of this.participants)
                data["participants"].push(item.toJSON());
        }
        if (Array.isArray(this.comments)) {
            data["comments"] = [];
            for (let item of this.comments)
                data["comments"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICertificateDto {
    handle?: string;
    type?: string | undefined;
    validFrom?: Date;
    validTo?: Date;
    supplier?: SupplierDto;
    pdfDocument?: string | undefined;
    participants?: ParticipantDto[] | undefined;
    comments?: CommentDto[] | undefined;
}

export class CommentDto implements ICommentDto {
    certificateHandle?: string;
    userHandle?: string;
    userName?: string | undefined;
    text?: string | undefined;

    constructor(data?: ICommentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.certificateHandle = _data["certificateHandle"];
            this.userHandle = _data["userHandle"];
            this.userName = _data["userName"];
            this.text = _data["text"];
        }
    }

    static fromJS(data: any): CommentDto {
        data = typeof data === 'object' ? data : {};
        let result = new CommentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["certificateHandle"] = this.certificateHandle;
        data["userHandle"] = this.userHandle;
        data["userName"] = this.userName;
        data["text"] = this.text;
        return data;
    }
}

export interface ICommentDto {
    certificateHandle?: string;
    userHandle?: string;
    userName?: string | undefined;
    text?: string | undefined;
}

export class ParticipantDto implements IParticipantDto {
    handle?: string;
    name?: string | undefined;
    email?: string | undefined;
    department?: string | undefined;
    plant?: string | undefined;
    userId?: string | undefined;

    constructor(data?: IParticipantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.handle = _data["handle"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.department = _data["department"];
            this.plant = _data["plant"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): ParticipantDto {
        data = typeof data === 'object' ? data : {};
        let result = new ParticipantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["handle"] = this.handle;
        data["name"] = this.name;
        data["email"] = this.email;
        data["department"] = this.department;
        data["plant"] = this.plant;
        data["userId"] = this.userId;
        return data;
    }
}

export interface IParticipantDto {
    handle?: string;
    name?: string | undefined;
    email?: string | undefined;
    department?: string | undefined;
    plant?: string | undefined;
    userId?: string | undefined;
}

export class SupplierDto implements ISupplierDto {
    name?: string | undefined;
    index?: string | undefined;
    city?: string | undefined;
    handle?: string;

    constructor(data?: ISupplierDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.index = _data["index"];
            this.city = _data["city"];
            this.handle = _data["handle"];
        }
    }

    static fromJS(data: any): SupplierDto {
        data = typeof data === 'object' ? data : {};
        let result = new SupplierDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["index"] = this.index;
        data["city"] = this.city;
        data["handle"] = this.handle;
        return data;
    }
}

export interface ISupplierDto {
    name?: string | undefined;
    index?: string | undefined;
    city?: string | undefined;
    handle?: string;
}

export class UserDto implements IUserDto {
    handle?: string;
    name?: string | undefined;
    email?: string | undefined;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.handle = _data["handle"];
            this.name = _data["name"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["handle"] = this.handle;
        data["name"] = this.name;
        data["email"] = this.email;
        return data;
    }
}

export interface IUserDto {
    handle?: string;
    name?: string | undefined;
    email?: string | undefined;
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

}